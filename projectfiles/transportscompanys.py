from projectfiles.dates import *

from threading import Thread
import datetime
import requests
import time
import os
import telebot
import sqlite3

class class_tk:

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
    def __init__(self, bot):
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–æ—Ç–∞ telegram
        self.bot = bot
        # –í—Ä–µ–º—è —Å–µ–π—á–∞—Å
        today = datetime.datetime.today()
        todaytime = today.strftime("%H:%M:%S")
        # –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –¢–ö
        # timetoscantk = today.time().strftime("%H:%M")
        self.timetoscantk = (today + datetime.timedelta(minutes=1)).strftime("%H:%M")
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.timetosendmessageresponsible = (today + datetime.timedelta(minutes=2)).strftime("%H:%M")
        # –î–∞–Ω–Ω—ã—Ö –ø–æ –¢–ö
        self.datesformdellin = []

    # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    def startprocessing(self):
        print("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–ø—Ä–æ—Å–∞ –¢–ö.")
        while True:
            # –í—Ä–µ–º—è —Å–µ–π—á–∞—Å
            today = datetime.datetime.today()
            todaytime = today.strftime("%H:%M")
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            self.switcher(todaytime)
            # –ó–∞—Å—ã–ø–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            time.sleep(60)

    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    def switcher(self, argument):
        match argument:

            # –í—Ä–µ–º—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¢–ö
            case self.timetoscantk:
                print("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¢–ö")
                dellin = Thread(target=self.scandatesfromdellin)
                dellin.start()

            # –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø–æ –¢–ö:
            case self.timetosendmessageresponsible:
                print("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¢–ö")
                sendmessage = Thread(target=self.sendmessageresponsible)
                sendmessage.start()

            # –í—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
            case default:
                return print("–í—Ä–µ–º—è —Å–µ–π—á–∞—Å:\t", default)

    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¢–ö "–î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏"
    def scandatesfromdellin(self):
        self.datesformdellin = self.finddataonstite()
        #print(f"\t‚Ññ\t\t‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π\t\t\t–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\t\t–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ —Å–∫–ª–∞–¥\t–î–∞—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ")
        #for element in range(0, 10):
        #    if self.datesformdellin[element]["stateName"] != "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω":
        #        print(f"\t{element}\t\t{self.datesformdellin[element]["orderId"]}\t\t{self.datesformdellin[element]["stateName"]}\t\t\t{self.datesformdellin[element]["orderDates"]["arrivalToOspReceiver"]}\t\t\t\t{self.datesformdellin[element]["orderDates"]["warehousing"]}")

    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–ö "–î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏"
    def finddataonstite(self):
        address = datesfromdellin.addressautorisation
        datesjson = {
            "appkey": datesfromdellin.apikey,
            "login": datesfromdellin.login,
            "password": datesfromdellin.password
        }
        result = requests.post(address, json=datesjson)
        dates = result.json()
        sessionid = dates['data']['sessionID']
        datesjson2 = {
            "appkey": datesfromdellin.apikey,
            "sessionID": sessionid,
        }
        result = requests.post(datesfromdellin.addresmethod2, json=datesjson2)
        resultjson = result.json()["orders"]
        return resultjson

    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º
    def sendmessageresponsible(self):
        # –í—ã—è—Å–Ω—è–µ–º –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–µ—Ä–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(pathdatabase) == True:
            print("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            con = sqlite3.connect(pathdatabase)
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            con.close()
        else:
            print("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\t–°–æ–∑–¥–∞—ë–º –±–∞–∑—É –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏")
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            text = "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¢–ö –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞("
            self.bot.send_message(userid.id_6080, text)

        # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –¢–ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        '''# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        con = sqlite3.connect(pathdatabase)
        request = ('SELECT TransportCompany.Name, FullName.first_name, FullName.last_name FROM TransportCompany, FullName WHERE TransportCompany.id_responsible=FullName.id UNION SELECT TransportCompany.Name, TransportCompany.id_responsible, TransportCompany.id_responsible FROM TransportCompany WHERE TransportCompany.id_responsible="None"')
            datesfromdatabase = checkdatesfromdatabase(con, request)
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            con.close()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å —ç—Ç–∏–º–∏ –¢–ö, —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å—ã
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            markup = telebot.types.InlineKeyboardMarkup()
            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for element in datesfromdatabase:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                name = element[1] + " " + element[2]
                responsiblename = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                btn1 = telebot.types.InlineKeyboardButton(element[0], callback_data="WrongButton")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                if name == "None None":
                    btn2 = telebot.types.InlineKeyboardButton(responsiblename, callback_data=element[0])
                else:
                    btn2 = telebot.types.InlineKeyboardButton(name, callback_data=element[0])
                markup.row(btn1, btn2)
            # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            btn3 = telebot.types.InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é", callback_data="Break")
            markup.add(btn3)
        '''





        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        for element in range(0, 10):
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–æ—á–∫–∏ –∏ "–ø–ª–∏—Ç–∫—É"
            markup = telebot.types.InlineKeyboardMarkup()
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if self.datesformdellin[element]["stateName"] != "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω":
                text = "üì¶  " + str(self.datesformdellin[element]["orderId"]) + "\n"
                text += "                 <b>" + str(self.datesformdellin[element]["stateName"]) + "</b>\n"
                text += "                 " + str(self.datesformdellin[element]["orderDates"]["arrivalToOspReceiver"]) + "\n"
                text += "                 " + str(self.datesformdellin[element]["orderDates"]["warehousing"]) + "\n"
                texturl = "https://www.dellin.ru/cabinet/orders/" + self.datesformdellin[element]["orderId"] + "/"
                button = telebot.types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=texturl)
                markup.add(button)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.bot.send_message(userid.id_6080, text, parse_mode="HTML", reply_markup=markup)